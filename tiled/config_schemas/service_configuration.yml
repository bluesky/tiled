# This schema (a jsonschema in YAML format) is used
# for validating configuration.
#
# This schema is also used by our documentation system to build the
# service configuration reference section based on the description fields. See
# doc/source/conf.py for that logic!
#
# We look to document all the options, but we don't look to enforce the perfect
# validation logic within this file.
#
# ref: https://json-schema.org/learn/getting-started-step-by-step.html
#
$schema": http://json-schema.org/draft-07/schema#
type: object
additionalProperties: false
properties:
  trees:
    description: |
      This section contains a *list* of one or more items,
      each describing a Tree to be served.
    type: array
    items:
      type: object
      required:
        - tree
        - path
      additionalProperties: false
      properties:
        tree:
          type: string
          description: |
            Type of tree to serve. This may be:

            - The string `files`, a shorthand for serving a directory of files.
            - An import path to a Tree *instance*.
            - An import path to a callable (function or type) that returns a
              Tree. For these, the `args:` parameter below must be used as well.

            In an import path, packages/modules are separated by dots,
            and the object itself it separated by a colon.

            Examples:

                # Tree instances
                tiled.examples.generated_minimal:tree
                tiled examples.generated:tree
                my_python_module:my_tree_instance

                # Callables that return Tree instances
                tiled.adapters.files:DirectoryAdapter.from_directory
                my_python_module:CustomTree

        path:
          type: string
          description: |
            URL subpath for to serve this Tree on.
            A good default choice is `"/"` if you are serving
            one Tree.
        args:
          type: [object, "null"]
          additionalProperties: true
          description: |
            If `tree:` is set to `files` or some callable that returns a
            Tree, this parameter must be included. It may contain named
            arguments to pass to the callable. It may be empty or `null` if the
            callable requires no arguments.

            Example:

            ```yaml
            - path: "/"
              tree: tiled.adapters.files:DirectoryAdapter.from_directory
              args:
                directory: "path/to/files"
            ```
        access_control:
          description: |
            AccessPolicy object encoding rules for which users can see which entries.
            If this is set (not null) then an authenticator must also be set.

            Example:

            ```yaml
            access_control:
              access_policy: "tiled.adapters.mapping:SimpleAccessPolicy"
              args:
                access_lists:
                  alice: ["A", "B"]
                  bob: ["C"]
                  cara: "tiled.adapters.mapping:SimpleAccessPolicy.ALL"
            ```

          type: [object, "null"]
          additionalProperties: false
          required:
            - access_policy
            - args
          properties:
            args:
              type: object
              additionalProperties: true
            access_policy:
              type: string
  media_types:
    type: object
    additionalProperties: true
    properties:
      array:
        type: object
        additionalProperties: true
        description: |
          Additional exporters (a.k.a. serializers) for array structures.

          Given as a media type (a.k.a MIME type) mapped to an importable function,
          as in

          ```yaml
          application/x-my-custom-format: package.module:exporter_function
          ```
      dataframe:
        type: object
        additionalProperties: true
        description: |
          Additional exporters (a.k.a. serializers) for dataframe structures.

          Given as a media type (a.k.a MIME type) mapped to an importable function,
          as in

          ```yaml
          application/x-my-custom-format: package.module:exporter_function
          ```
      dataset:
        type: object
        additionalProperties: true
        description: |
          Additional exporters (a.k.a. serializers) for xarray dataset structures.


          Given as a media type (a.k.a MIME type) mapped to an importable function,
          as in

          ```yaml
          application/x-my-custom-format: package.module:exporter_function
          ```
  file_extensions:
    type: object
    additionalProperties: true
    description: |
      This supports the convenience alias `?format=ext` to request a format
      corresponding to some file extension `ext`.

      Contents should map file extension to a media type (a.k.a MIME type) as in

      ```
      ext: application/x-my-custom-format
      ```
  authentication:
    type: [object, "null"]
    additionalProperties: false
    properties:
      providers:
        type: array
        item:
          type: object
          additionalProperties: false
          required:
            - authenticator
            - provider
          properties:
            provider:
              type: string
              pattern: "^[a-zA-Z0-9_-]*$"
              description: |
                Unique URL-friendly string used to identify this identity provider
                in Tiled URLs and in internal book-keeping.
            authenticator:
              type: string
              description: |
                Type of Authenticator to use.

                These are typically from the tiled.authenticators module,
                though user-defined ones may be used as well.

                This is given as an import path. In an import path, packages/modules
                are separated by dots, and the object itself it separated by a colon.

                Example:

                ```yaml
                authenticator: tiled.examples.DummyAuthenticator
                ```
                args:
                  type: [object, "null"]
                  description: |
                    Named arguments to pass to Authenticator. If there are none,
                    `args` may be omitted or empty.

                    Example:

                    ```yaml
                    authenticator: tiled.examples.PAMAuthenticator
                    args:
                      service: "custom_service"
                    ```
      tiled_admins:
        type: array
        items:
          type: object
          additionalProperties: false
          required:
            - provider
            - id
          properties:
            provider:
              type: string
            id:
              type: string
        description: |
          Give users with these identities 'admin' Role.
      secret_keys:
        type: array
        items:
          type: string
        description: |
          Secret keys used to sign secure tokens.

          When generating a secret, is important to produce a difficult-to-guess
          random number, and make it different each time you start up a server.
          Two equally good ways to generate a secure secret...

          With ``openssl``:

              openssl rand -hex 32

          With ``python``:

              python -c "import secrets; print(secrets.token_hex(32))"

      allow_anonymous_access:
        type: boolean
        description: |
          If true, allow unauthenticated, public access to any entries
          that are not specifically controlled with an access policy.

          Default is false.

      single_user_api_key:
        type: string
        description: |
          Secret API key used in single-user deployments.

          When generating a secret, is important to produce a difficult-to-guess
          random number, and make it different each time you start up a server.
          Two equally good ways to generate a secure secret...

          With ``openssl``:

              openssl rand -hex 32

          With ``python``:

              python -c "import secrets; print(secrets.token_hex(32))"

      access_token_max_age:
        type: number
        description: |
          This controls how often fresh access token have to be
          re-issued. The process is transparent to the user and just affects performance.
          An *access* token cannot be revoked, so its lifetime should be short. The
          default is 900 seconds (15 minutes).

          Units are **seconds**.
      refresh_token_max_age:
        type: number
        description: |
          Time after which inactive sessions
          (sessions that have not refreshed tokens) will time out.
          Default is

          Units are **seconds**.
      session_max_age:
        type: [number, "null"]
        description: |
          Even *active* sessions are timed out after this
          limit, and the user is required to resubmit credentials. By default,
          this is unset and active session are never shut down.
    description:
      This section describes whether and how to authenticate users.
  database_uri:
    type: string
    description: |
      When Tiled is configured with authentication providers, it uses a SQL database
      to persist information related to identities, sessions, and keys. (When it is
      used without authentication providers, no database is used.)

      If Tiled is configured with authentication providers above but a database
      URI is not specified, `sqlite:///./tiled.sqlite` (i.e. a SQLite database in
      the current working directory) will be used.

      Tiled officially supports PostgreSQL and SQLite, but any database engine
      supported by SQLAlchemy *may* work.
  database_settings:
    type: object
    additionalProperties: false
    properties:
      pool_size:
        type: integer
        description: Connection pool size
  access_control:
    type: object
    additionalProperties: false
    required:
      - access_policy
      - args
    properties:
      access_policy:
        type: [string, "null"]
        description: |
          AccessPolicy object encoding rules for which users can see which entries.
          If this is set (not null) then an authenticator must also be set.

          Example:

          ```yaml
          access_control:
            access_policy: "tiled.adapters.mapping:SimpleAccessPolicy"
            args:
              access_lists:
                alice: ["A", "B"]
                bob: ["C"]
                cara: "tiled.adapters.mapping:SimpleAccessPolicy.ALL"
          ```
      args:
        type: object
        additionalProperties: true
    description: |
      This section describes which users can see which entries.
  object_cache:
    properties:
      available_bytes:
        type: number
        description: |
          Maximum size for the object cache, given as a number of bytes as in
          1_000_000 or as a fraction of system RAM (total physical memory) as in
          0.3. Set to 0 to disable this cache. By default, it will use up to
          0.15 (15%) of RAM.
      log_level:
        type: "string"
        enum: ["critical", "error", "warning", "info", "debug"]
        description: |
          Set to "debug" level to log cache hits, misses, and stores.
          Default is "info" level, which logs cache configuration at application startup.
    description: |
      The 'object' cache is available to all Adapters to cache arbitrary objects, including
      file handles or chunks of data, in process memory.
  response_bytesize_limit:
    type: integer
    description: |
      Maximum byte size of a response, given in bytes. The default is low (300 MB) keeping
      in mind that data is read into server memory and should generally be fetched in chunks.
  allow_origins:
    type: array
    items:
      type: string
    description: |
        This list of domains enables web apps served from other domains to make
        requests to the tiled serve.

        Example:

        ```yaml
        allow_origins:
          - https://chart-studio.plotly.com
        ```

        Read more about Cross-Origin Resource Sharing (CORS)
        from Mozilla's web developer documentation.

        https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
  uvicorn:
    type: object
    properties:
      host:
        type: string
        description: |
          Bind socket to this host. Use `--host 0.0.0.0` to make the application
          available on your local network. IPv6 addresses are supported, for
          for example --host `'::'`. Default `'127.0.0.1'`.
      port:
        type: integer
        description: Bind to a socket with this port. Default `8000`.
      workers:
        type: integer
        description: |
          Use multiple worker processes. Defaults to the `$WEB_CONCURRENCY`
          environment variable if available, or `1`.
      root_path:
        type: string
        description: |
          Configure the application with a root_path when it is behind a proxy
          serving it on some path prefix.
      proxy_headers:
        type: boolean
        description: |
          Enable/Disable X-Forwarded-Proto, X-Forwarded-For,
          X-Forwarded-Port to populate remote address info. Defaults to enabled,
          but is restricted to only trusting connecting IPs in the
          forwarded-allow-ips configuration.
      forwarded_allow_ips:
        type: string
        description: |
          Comma separated list of IPs to trust with proxy headers. Defaults to
          the `$FORWARDED_ALLOW_IPS` environment variable if available, or
          '127.0.0.1'. A wildcard '*' means always trust.
      ssl_keyfile:
        type: string
        description: SSL key file
      ssl_certfile:
        type: string
        description: SSL certificate file
      ssl_keyfile_password:
        type: string
        description: SSL keyfile password
      ssl_version:
        type: integer
        description: SSL version to use (see stdlib ssl module's). Default 2.
      ssl_cert_reqs:
        type: integer
        description: Whether client certificate is required (see stdlib ssl module's). Default 0.
      ssl_ca_certs:
        type: string
        description: CA certificates file
      ssl_ciphers:
        type: string
        description: Ciphers to use (see stdlib ssl module's). Default TLSv1.
  metrics:
    type: object
    properties:
      prometheus:
        type: boolean
        description: |
          Enable/Disable prometheus metrics. Default is false.
          If enabled `PROMETHEUS_MULTIPROC_DIR` environment variable
          must be set to the path of a writable directory.
